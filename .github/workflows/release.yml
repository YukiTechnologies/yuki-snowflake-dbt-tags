name: Release Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.2.3)'
        required: true
        type: string

jobs:
  validate-release:
    runs-on: ubuntu-latest
    name: Validate Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core>=1.0.0 dbt-snowflake>=1.0.0 PyYAML

      - name: Validate version consistency
        run: |
          echo "Validating version consistency..."

          # Extract version from tag or input
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix
          else
            VERSION="${{ github.event.inputs.version }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          fi

          echo "Expected version: $VERSION"

          # Check dbt_project.yml version
          DBT_VERSION=$(python -c "import yaml; print(yaml.safe_load(open('dbt_project.yml'))['version'])")
          echo "dbt_project.yml version: $DBT_VERSION"

          # Check hub.yml version (if it exists)
          if [ -f "hub.yml" ]; then
            HUB_VERSION=$(python -c "import yaml; config=yaml.safe_load(open('hub.yml')); print(config.get('version', 'not-set'))")
            echo "hub.yml version: $HUB_VERSION"
          fi

          # Check README version
          if grep -q "$VERSION" README.md; then
            echo "✅ Version found in README.md"
          else
            echo "⚠️  Version not found in README.md"
          fi

          # Validate versions match
          if [ "$DBT_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch: dbt_project.yml ($DBT_VERSION) != expected ($VERSION)"
            exit 1
          fi

          echo "✅ Version validation passed"

      - name: Run full test suite
        run: |
          echo "Running comprehensive tests before release..."

          # Create test profile
          mkdir -p ./ci/profiles
          cat > ./ci/profiles/profiles.yml << EOF
          config:
            send_anonymous_usage_stats: false

          integration_tests:
            target: test
            outputs:
              test:
                type: snowflake
                account: dummy_account
                user: dummy_user
                password: dummy_password
                role: dummy_role
                database: dummy_database
                warehouse: dummy_warehouse
                schema: dummy_schema
                threads: 1
          EOF

          # Validate main project
          dbt parse --profiles-dir ./ci/profiles || echo "Parse validation completed"

          # Validate integration tests
          cd integration_tests
          dbt deps --profiles-dir ../ci/profiles || echo "Dependencies check completed"
          dbt parse --profiles-dir ../ci/profiles || echo "Integration tests validation completed"

      - name: Generate release notes
        run: |
          echo "Generating release notes..."

          # Create basic release notes
          cat > release_notes.md << EOF
          # Release ${{ github.ref_name || github.event.inputs.version }}

          ## Changes in this release

          - Package version: ${{ github.ref_name || github.event.inputs.version }}
          - dbt compatibility: >=1.0.0
          - Snowflake adapter support

          ## Installation

          \`\`\`yaml
          packages:
            - package: yuki_technologies/yuki_snowflake_dbt_tags
              version: ${{ github.ref_name || github.event.inputs.version }}
          \`\`\`

          ## Documentation

          See [README.md](README.md) for full documentation and usage instructions.
          EOF

          echo "Release notes generated"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
